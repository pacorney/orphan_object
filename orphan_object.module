<?php
/**
* @file
*
*
*
*
*/

/**
*
* Load fedora_item.inc from the fedora_repository module in the api folder.
* This is used to update, delete fedora objects
*
*/
module_load_include('inc', 'fedora_repository', 'api/fedora_item');

/**
* Implementation of hook_perm().
*/

function orphan_object_perm() {
  return array('administer Orphan Object Adminstration');
}

/**
* Implementation of hook_menu().
*/
function orphan_object_menu() {
  $items = array();
  $items['admin/content/orphan-object'] = array(
    'title' => t('Orphan Object Administration'),
    'page callback' => 'orphan_object_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer Orphan Object Adminstration'),
    'description' => t('Administrative Interface for management of Orphaned Fedora Objects'),
  );
  return $items;
}

/**
* Generates a page for the form.
*/
function orphan_object_form() {

  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage');

}

/**
* Builds the orphan_object form.
*/
function orphan_object_formpage($form_state) {

  module_load_include('inc', 'fedora_repository', 'api/fedora_collection');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  // Creates an array to hold the values to be used to create the form elements
  $orphans = array
  (
    array('oid' => 0, 'title' => '<a href = "http://192.168.56.195/fedora/repository/islandora:2216/-/Heart%20Beat">Heart Beat</a>', 'identifier' => 'islandora:2216'),
    array('oid' => 1, 'title' => '<a href = "http://192.168.56.195/fedora/repository/islandora:2221/-/Elmsdale">Elmsdale</a>', 'identifier' => 'islandora:2221'),
  );

  // Creates elements from the above values and sets up an array for the checkboxes
  foreach ($orphans as $orphan) {
    $active[$orphan['oid']] = '';
    $form[$orphan['oid']]['title'] = array
    (
      '#value' => $orphan['title'],
    );
    $form[$orphan['oid']]['identifier'] = array
    (
      '#value' => $orphan['identifier'],
    );
  }

  // Creates the checkboxes
  $form['active'] = array(
    '#type' => 'checkboxes',
    '#options' => $active,
    '#default_value' => variable_get('orphan_object_formpage_values', array(0, 1)),
  );

  // Creates the Save Configuration button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save Configuration',
  );
  
  $ritestarray = orphan_object_getlist();
  //$ritestarray = get_collections_as_option_array();
  
  foreach ($ritestarray as $rivalue) {
    $form[$rivalue]= array
    (
      '#value' => '<p>' . $rivalue . '</p>',
    );
  }

  //Set form submit and theme
  $form['#submit'][] = 'orphan_object_formpage_submit';
  $form['#theme'] = 'orphan_object_theme';

  return $form;
}

/**
* Sets what occurs when the Save Configuration is clicked.
*/

function orphan_object_formpage_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  variable_set('orphan_object_formpage_values', $form_state['values']['active']);
  drupal_set_message(t('The update has been performed.'));
}

/**
* Sets up for the theme.
*/

function orphan_object_theme() {
  return array
  (
    'orphan_object_theme' => array
  (
    'arguments' => array('form' => NULL)
  ),
  );
}

/**
* Sets the theme.
*/

function theme_orphan_object_theme($form) {
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['active']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['active'][$oid]);
    $row[] = drupal_render($form[$oid]['title']);
    $row[] = drupal_render($form[$oid]['identifier']);
    $rows[] = $row;
  }

  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Active'), t('Object Title'), t('Identifier'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Active'), t('Object Title'), t('Identifier'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were found'),
      'colspan' => 2,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }

  //set as a table theme and return the output
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
* Method used to delete orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be deleted.
* @param $uid
* The current User ID. (This is the user deleting the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_delete_fedora_objects($objects, $uid) {
  $results = array();

  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'D'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to deleted by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to purge orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user pruging the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_purge_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $log_message = "Object " . $value . "} is being set to purged by user: {" . $uid . "}.";
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to inactivate orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user inactivating the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/
function orphan_object_inactivate_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'I'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to inactivated by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

function orphan_object_getlist() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  $restricted = variable_get('fedora_namespace_restriction_enforced', TRUE);
  
  $everythingquery = 'select $object $title from <#ri> 
                                   where ($object <dc:title> $title)';
  $everythingurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $everythingurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $everythingcontent = do_curl($everythingurl . htmlentities(urlencode($everythingquery)));
  $everythinglist = explode("\n", $everythingcontent);
  array_shift($everythinglist);
  $everythinglist = preg_replace('/info:fedora\//', '', $everythinglist);
  $everything = array();
  foreach ($everythinglist as $everythingitem) {   //removes  blanks
    if ($everythingitem) {
      $everythingparts = explode(',', $everythingitem);
	  array_push($everything, $everythingparts[0]);
    }
  }
  
  $collectionsquery = 'select $object $title from <#ri>
                            where ($object <dc:title> $title
                              and $object <info:fedora/fedora-system:def/model#hasModel> <info:fedora/islandora:collectionCModel>)
                            order by $title';
  $collectionsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $collectionsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $collectionscontent = do_curl($collectionsurl . htmlentities(urlencode($collectionsquery)));
  $collectionslist = explode("\n", $collectionscontent);
  array_shift($collectionslist);
  $collectionslist = preg_replace('/info:fedora\//', '', $collectionslist);
  $collections = array();
  foreach ($collectionslist as $collectionsitem) {   //removes  blanks
    if ($collectionsitem) {
      $collectionsparts = explode(',', $collectionsitem);
      array_push($collections, $collectionsparts[0]);
    }
  }
  
  $collectionsarray = array();
  
  foreach ($collections as $cpid) {
  
    $cpidquery = 'select $object $title from <#ri>
                              where ($object <dc:title> $title
                                and $object <fedora-rels-ext:isMemberOfCollection><info:fedora/' . $cpid . '>)';
    $cpidurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
    $cpidurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
    $cpidcontent = do_curl($cpidurl . htmlentities(urlencode($cpidquery)));
    $cpidlist = explode("\n", $cpidcontent);
    array_shift($cpidlist);
    $cpidlist = preg_replace('/info:fedora\//', '', $cpidlist);
    $cpidarray = array();
    foreach ($cpidlist as $cpiditem) {   //removes  blanks
      if ($cpiditem) {
        $cpidparts = explode(',', $cpiditem);
        array_push($cpidarray, $cpidparts[0]);
      }
    }
  $collectionsarray = array_merge ($collectionsarray, $cpidarray);	
  
  }
  
  $allowed_string = variable_get('fedora_pids_allowed', 'default: demo: changeme: islandora:');
  $namespaces = explode(':', $allowed_string);
  foreach ($namespaces as $namespace) {
      if ($namespace) {
          $allowed[] = trim($namespace);
      }
  }  
  $cmodelsquery = 'select $object $title from <#ri>
						            where ($object <dc:title> $title
                                      and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ContentModel-3.0>
                                      or $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:ContentModelsCollection>))
                                    order by $title';
  $cmodelsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $cmodelsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $cmodelscontent = do_curl($cmodelsurl . htmlentities(urlencode($cmodelsquery)));
  $cmodelslist = explode("\n", $cmodelscontent);
  array_shift($cmodelslist);
  $cmodelslist = preg_replace('/info:fedora\//', '', $cmodelslist);
  $cmodels = array();
  foreach ($cmodelslist as $cmodelsitem) {   //removes  blanks
    if ($cmodelsitem) {
      $cmodelsparts = explode(',', $cmodelsitem);
      array_push($cmodels, $cmodelsparts[0]);
    }
  }
  
  $smodelsquery = 'select $object $title from <#ri>
                                where ($object <dc:title> $title
                                  and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ServiceDefinition-3.0>))
                                order by $title';
  $smodelsurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $smodelsurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $smodelscontent = do_curl($smodelsurl . htmlentities(urlencode($smodelsquery)));
  $smodelslist = explode("\n", $smodelscontent);
  array_shift($smodelslist);
  $smodelslist = preg_replace('/info:fedora\//', '', $smodelslist);
  $smodels = array();
  foreach ($smodelslist as $smodelsitem) {   //removes  blanks
    if ($smodelsitem) {
      $smodelsparts = explode(',', $smodelsitem);
      array_push($smodels, $smodelsparts[0]);
    }
  }
  
  $sdeploymentquery = 'select $object $title from <#ri>
                                where ($object <dc:title> $title
                                  and ($object <fedora-model:hasModel> <info:fedora/fedora-system:ServiceDeployment-3.0>))
                                order by $title';
  $sdeploymenturl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $sdeploymenturl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $sdeploymentcontent = do_curl($sdeploymenturl . htmlentities(urlencode($sdeploymentquery)));
  $sdeploymentlist = explode("\n", $sdeploymentcontent);
  array_shift($sdeploymentlist);
  $sdeploymentlist = preg_replace('/info:fedora\//', '', $sdeploymentlist);
  $sdeployment = array();
  foreach ($sdeploymentlist as $sdeploymentitem) {   //removes  blanks
    if ($sdeploymentitem) {
      $sdeploymentparts = explode(',', $sdeploymentitem);
      array_push($sdeployment, $sdeploymentparts[0]);
    }
  }

  $returnlist = array_diff($everything, $collectionsarray);
  $returnlist = array_diff($returnlist, $cmodels);
  $returnlist = array_diff($returnlist, $smodels);
  $returnlist = array_diff($returnlist, $sdeployment);
  $returnlist = array_diff($returnlist, $collections);
  
  return $returnlist;
}

/**
* Method used to activate orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user activate the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/
function orphan_object_activate_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'A'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to active by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}