<?php
/**
* @file
*
*
*
*
*/

/**
*
* Load fedora_item.inc from the fedora_repository module in the api folder.
* This is used to update, delete fedora objects
*
*/
module_load_include('inc', 'fedora_repository', 'api/fedora_item');

/**
* Implementation of hook_perm().
*/

function orphan_object_perm() {
  return array('administer Orphan Object Adminstration');
}

/**
* Implementation of hook_menu().
*/
function orphan_object_menu() {
  $items = array();
  $items['admin/content/orphan-object'] = array(
    'title' => t('Orphan Object Administration'),
    'page callback' => 'orphan_object_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer Orphan Object Adminstration'),
    'description' => t('Administrative Interface for management of Orphaned Fedora Objects'),
  );
  return $items;
}

/**
* Generates a page for the form.
*/
function orphan_object_form() {

  // Form builder call to build the form
  return drupal_get_form('orphan_object_formpage');

}

function orphan_object_getState($incpid){
$pid = $incpid;
$urltest = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
$urltest .= "/objects?terms=$pid&state=true&resultFormat=xml";
$resultxml2 = do_curl($urltest);
$resultelements2 = simplexml_load_string($resultxml2);
  if (!empty($resultelements2)) {
    $result2 = (string) $resultelements2->resultList->objectFields->state;
  }
return $result2;
}

/**
* Builds the orphan_object form.
*/
function orphan_object_formpage(&$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $resultsarray = orphan_object_getList();
  
  $oidcount = 1;
  $orphans = array();
  foreach ($resultsarray as $resultitem){
    $fedora_item = new Fedora_Item($resultitem);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $history = $fedora_item->get_datastream_history($resultitem);
    }
    else {
      $history = '';
    }
	$orphans[$oidcount] = array('oid' => $oidcount, 'pid' => $resultitem, 'state' => orphan_object_getState($resultitem), 'logmessage' => $history);
	$oidcount++;
  }

  // Creates elements from the above values and sets up an array for the checkboxes
  foreach($orphans as $orphan) {
    $manage[$orphan['oid']] = '';
    $form[$orphan['oid']]['pid'] = array
    (
      '#value' => $orphan['pid'],
    );
    $form[$orphan['oid']]['state'] = array
    (
      '#value' => $orphan['state'],
    );
	$form[$orphan['oid']]['logmessage'] = array
    (
      '#value' => $orphan['logmessage'],
    );
  }
  
  // Creates the checkboxes
  $form['manage'] = array(
    '#type' => 'checkboxes',
	
    '#options' => $manage,
  );
  
  // Creates the Save Configuration button
  $form['toManage'] = array(
    '#type' => 'submit',
    '#value' => 'Manage Selected Object(s)',
  );

  //Set form submit and theme
  $form['#submit'][] = 'orphan_object_formpage_submit';
  $form['#theme'] = 'orphan_object_theme';

  return $form;
}

/**
* Sets what occurs when the Save Configuration is clicked.
*/

function orphan_object_formpage_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $passedarray = array();
  $sendresults = orphan_object_getList();
  $passedcount = 0;
  foreach ($form_state['values']['manage'] as $key => $element){
	$passedarray[$passedcount] = $sendresults[($element-1)];
	$passedcount++;
  }
  //session_start();
  //$_SESSION['giveToManage'] = $passedarray;
  
  foreach ($passedarray as $pass){
    drupal_set_message ($pass);
  };
}

/**
* Sets up for the theme.
*/

function orphan_object_theme() {
  return array
  (
    'orphan_object_theme' => array
    (
      'arguments' => array('form' => NULL)
    ),
  );
}

/**
* Sets the theme.
*/

function theme_orphan_object_theme($form) {    
  global $pager_page_array, $pager_total, $pager_total_items;
  
  $page = isset($_GET['page']) ? $_GET['page'] : '0';
  $limit = 1;
  $element = 0;
  $pager_page_array = explode(',', $page);
  
  
  $rows = array();

  //Creates the table rows
  foreach (element_children($form['manage']) as $oid) {
    $row = array();
    $row[] = drupal_render($form['manage'][$oid]);
    $row[] = drupal_render($form[$oid]['pid']);
    $row[] = drupal_render($form[$oid]['state']);
	$row[] = drupal_render($form[$oid]['logmessage']);
    $rows[] = $row;
  }
  
  
  //if there are rows add these headers
  if (count($rows)) {
    $header = array(t('Manage Object'), t('Object PID'), t('Object State'), t('Last Log Message'));
  }
  //otherwise add these headers and give this message
  else {
    $header = array(t('Manage Object'), t('Object PID'), t('Object State'), t('Last Log Message'));
    $row = array();
    $row[] = array
    (
      'data' => t('No Orphans were found'),
      'colspan' => 2,
      'style' => 'text-align:center',
    );
    $rows[] = $row;
  }
  $total = count($rows);
  $pager_total_items[$element] = $total; 
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  
  pager_query("SELECT %d", $limit, 0, NULL, $total);
  
  
  //set as a table theme and return the output
  $content = theme('table', $header, $rows);
  $output = $content . theme('pager');
  $output .= drupal_render($form);
  return $output;
  
  }

/**
* Method used to delete orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be deleted.
* @param $uid
* The current User ID. (This is the user deleting the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_delete_fedora_objects($objects, $uid) {
  $results = array();

  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'D'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to deleted by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to purge orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user pruging the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/

function orphan_object_purge_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $log_message = "Object " . $value . "} is being set to purged by user: {" . $uid . "}.";
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
* Method used to inactivate orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user inactivating the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/
function orphan_object_inactivate_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'I'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to inactivated by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}

/**
 * Function: orphan_objects_getList
 *
 * Description: Returns an array containing all the orphan objects in the fedora repository
 *
 * @return array
 */
 
function orphan_object_getList() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  
  $collectionarray = array();
  
  $collectionquery = 'select $object $title from <#ri>
                            where ($object <dc:title> $title
                              and $object <fedora-rels-ext:isMemberOfCollection><info:fedora/islandora:2297>)';
  $collectionurl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
  $collectionurl .= "?type=tuples&flush=TRUE&format=csv&limit=1000&lang=itql&stream=on&query=";
  $collectioncontent = do_curl($collectionurl . htmlentities(urlencode($collectionquery)));
  $collectionlist = explode("\n", $collectioncontent);
  array_shift($collectionlist);
  $collectionlist = preg_replace('/info:fedora\//', '', $collectionlist);
  $ccollectionarray = array();
  foreach ($collectionlist as $collectionitem) {   //removes  blanks
    if ($collectionitem) {
      $collectionparts = explode(',', $collectionitem);
      array_push($collectionarray, $collectionparts[0]);
    }
  }
  
  $nidarray = array();
  $pidarray = array();
  $existingnodes = array();
  $nonexistingnodes = array();
  $npidarray = array();
  
  $results = db_query("SELECT nid FROM {node_fedora_objects}");
  
  while ($row = db_fetch_object($results)){
    $nidarray[$nidcount] = $row->nid;	
  }
  
  foreach ($nidarray as $checknid){
	$test_node = node_load($checknid);
	if ($test_node != false){
	  $existingnodes[$existingcount] = $checknid;
	}
	else if ($test_node == false){
	  $nonexistingnodes[$nonexistcount] = $checknid;
	}
  }
  
  if(!empty($existingnodes)){
  
    $placeholders = db_placeholders($existingnodes);
    $pidresults = db_query("SELECT f.pid FROM {node_fedora_objects} f WHERE f.nid IN ($placeholders)", $existingnodes);

    while ($row = db_fetch_object($pidresults)){
      $pidarray[$databasecount] = $row->pid;
    }
  }
  
  if(!empty($nonexistingnodes)){
  
    $placeholders = db_placeholders($nonexistingnodes);
    $pidresults = db_query("SELECT f.pid FROM {node_fedora_objects} f WHERE f.nid IN ($placeholders)", $existingnodes);

    while ($row = db_fetch_object($npidresults)){
      $npidarray[$databasecount] = $row->pid;
    }
  }

  $returnlist = array_diff($collectionarray, $pidarray);
  $reversereturnlist = array_intersect($pidarray, $collectionarray);
  $nonexistlist = array_intersect($reversereturnlist, $npidarray);
  $returnlist = array_merge($returnlist, $nonexistlist);
  
  return $returnlist;
}

/**
* Method used to activate orphan fedora objects
*
* @param $objects
* An array of object PIDs selected by the user to be purged.
* @param $uid
* The current User ID. (This is the user activate the objects)
* @return $results
* Multi-Dimensal Array containing and array of successful objects and
* an array of failure objects.
*/
function orphan_object_activate_fedora_objects($objects, $uid) {
  $results = array();
  //incase only one element is passed in
  if (!is_array($objects)) {
    $objects = array($objects);
  }

  foreach ($objects as $value) {
    $fedora_item = new Fedora_Item($value);
    //check to see if the fedora object exists, if exists 1 is returned.
    if ($fedora_item->exists()) {
      $state = 'A'; //Set the object to deleted
      $dsid = $PID; //I think this is distinct identifier
      $log_message = "Object " . $value . "} is being set to active by user: {" . $uid . "}.";
      $fedora_item->set_datastream_state($dsid, $state, $log_message);
      $results["success"][] = $value;
    }
    else {
      $results["failure"][] = $value;
    }
  }

  return $results;
}